/*
    Name: zeCanDoIt

    Author: Harshit Vootukuri

    Difficulty: Hard

    Round:

    Test Case Description:
        The first line of input consists of an integer "N", the size of the array.
        The second line of input consists of "N" space-seperated integers I1 I2 I3 ... IN

    Constraints:
        N: 5 to 200 (inclusive on both ends)
        I: 1 to 65536 (exclusive on both ends)
*/
/*
Logic:
    In this problem, you are given an array of integers, and the goal is to replace the elements whose index is a prime number (0-based index) with their Zeckendorf representation in descending order.

    Zeckendorf Representation is a unique way of representing a number as the sum of non-consecutive Fibonacci numbers.

Sample Input:
    6
    50 60 70 80 90 100

Sample Output:
    50 60 55 13 2 55 21 3 1 90 89 8 3
*/

/*
    Edge Cases:

    Input1:
        6
        65535 65535 65535 65535 65535 65535
    Output1:
        65535 65535 46368 17711 987 377 89 3 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3

    Input2:
        200

    Output2:
        65535 65535 46368 17711 987 377 89 3 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3 65535 65535 65535 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3 65535 65535 65535 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3 65535 65535 65535 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3 65535 65535 65535 65535 65535 65535 65535 65535 65535 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3 65535 65535 65535 46368 17711 987 377 89 3 65535 46368 17711 987 377 89 3
    Input3:
        200

    Output3:

    Input4:
        30
        2048 4096 8192 16384 32768 2048 4096 8192 16384 32768 2048 4096 8192 16384 32768 2048 4096 8192 16384 32768 2048 4096 8192 16384 32768 2048 4096 8192 16384 32768
    Output4:
        2048 4096 6765 987 377 55 8 10946 4181 987 233 34 3 32768 1597 377 55 13 5 1 4096 6765 987 377 55 8 16384 32768 2048 2584 987 377 144 3 1 8192 10946 4181 987 233 34 3 32768 2048 4096 6765 987 377 55 8 16384 28657 2584 987 377 144 13 5 1 2048 4096 8192 10946 4181 987 233 34 3 32768 2048 4096 8192 16384 28657 2584 987 377 144 13 5 1
    Input5:
        20
        26129 35052 29101 59561 49003 38568 7897 21663 35944 45253 30826 35166 42655 20368 55508 45699 43287 7674 56497 8592
    Output5:
        26129 35052 28657 377 55 8 3 1 46368 10946 1597 610 34 5 1 49003 28657 6765 2584 377 144 34 5 2 7897 17711 2584 987 377 3 1 35944 45253 30826 28657 4181 1597 610 89 21 8 3 42655 17711 2584 55 13 5 55508 45699 43287 6765 610 233 55 8 3 56497 6765 1597 144 55 21 8 2
*/

#include <iostream>
#include <vector>
#include <sstream>
#include <cmath>
#include <limits>
using namespace std;

bool isPrime(int n)
{
    if (n < 2)
        return false;
    for (int i = 2; i <= sqrt(n); i++)
    {
        if (n % i == 0)
            return false;
    }
    return true;
}

vector<int> generateFibonacciUpTo(int n)
{
    vector<int> fib = {1, 2};
    while (fib.back() <= n)
    {
        fib.push_back(fib[fib.size() - 1] + fib[fib.size() - 2]);
    }
    fib.pop_back();
    return fib;
}

vector<int> zeckendorfRepresentation(int n)
{
    vector<int> fib = generateFibonacciUpTo(n);
    vector<int> representation;
    for (int i = fib.size() - 1; i >= 0; i--)
    {
        if (fib[i] <= n)
        {
            representation.push_back(fib[i]);
            n -= fib[i];
        }
    }
    return representation;
}

int main()
{

    int n;
    cin >> n;
    cin.ignore();

    if (n < 5 || n > 200)
    {
        cerr << "Invalid Input. Please look at the question description. Errors/Exceptions need not be handled in your solution." << endl;
        return 1;
    }

    vector<int> arr;
    string line;
    getline(cin, line);

    if (line.empty())
    {
        cerr << "Invalid Input. Please look at the question description. Errors/Exception cases need not be handled in your solution." << endl;
        return 1;
    }

    stringstream ss(line);
    int temp;
    while (ss >> temp)
    {
        if (temp <= 1 || temp >= 65536)
        {
            cerr << "Invalid Input. Please look at the question description. Errors/Exception cases need not be handled in your solution." << endl;
            return 1;
        }
        arr.push_back(temp);
    }

    if (arr.size() != n)
    {
        cerr << "Invalid Input. Please look at the question description. Errors/Exception cases need not be handled in your solution." << endl;
        return 1;
    }

    for (int i = 0; i < arr.size(); i++)
    {
        if (isPrime(i))
        {
            vector<int> fib_repr = zeckendorfRepresentation(arr[i]);
            for (int j = 0; j < fib_repr.size(); j++)
            {
                cout << fib_repr[j];
                if (j < fib_repr.size() - 1)
                    cout << " ";
            }
        }
        else
        {
            cout << arr[i];
        }
        if (i < arr.size() - 1)
            cout << " ";
    }
    cout << endl;

    return 0;
}
